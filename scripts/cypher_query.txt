// Query a-f; self-designed h1-4

// --a. WA Crashes (2020-2024), Articulated Trucks, Multiple Fatalities

MATCH (p:Person)-[:WAS_INVOLVED_IN]->(c:Crash),
      (c)-[:OCCURRED_IN_LGA]->(l:LGA), 
      (c)-[:OCCURRED_IN_SA4]->(:SA4)-[:IN_STATE]->(st:State {name: 'WA'}) 
WHERE c.year >= 2020 AND c.year <= 2024
  AND c.articulatedTruckInvolvement = 'yes'
  AND c.numberFatalities > 1
RETURN DISTINCT
       c.crashID_orig AS CrashID,
       p.personID AS PersonID,
       p.roadUser AS RoadUser,
       p.age AS Age,
       p.gender AS Gender,
       l.name AS LGAName, 
       c.month AS Month,
       c.year AS Year,
       c.numberFatalities AS TotalFatalitiesInCrash
ORDER BY CrashID, PersonID;


// --b. Max/Min Age, Motorcycle Riders, Holiday Periods, Inner Regional

MATCH (p:Person {roadUser: 'Motorcycle rider'})-[:WAS_INVOLVED_IN]->(c:Crash)
WHERE (c.christmasPeriod = 'yes' OR c.easterPeriod = 'yes') 
  AND c.nationalRemotenessAreas = 'Inner Regional Australia' 
  AND p.gender IN ['Male', 'Female'] 
  AND p.age IS NOT NULL 
RETURN p.gender AS Gender,
       max(p.age) AS MaximumAge,
       min(p.age) AS MinimumAge;

// --c. Young Drivers (17-25), Weekend/Weekday Counts per State (2024), Avg Age

MATCH (p:Person {
           ageGroup: '17_to_25',
           roadUser: 'Driver'
       })
       -[:WAS_INVOLVED_IN]->(c:Crash),
       (c)-[:OCCURRED_IN_SA4]->(:SA4)-[:IN_STATE]->(st:State)
WHERE c.year = 2024 AND p.age IS NOT NULL AND p.age > 0
RETURN st.name AS StateName,
       SUM(CASE c.dayOfWeekType WHEN 'Weekend' THEN 1 ELSE 0 END) AS WeekendFatalities,
       SUM(CASE c.dayOfWeekType WHEN 'Weekday' THEN 1 ELSE 0 END) AS WeekdayFatalities,
       round(avg(p.age),1) AS AverageAgeYoungDriver // Optional rounding
ORDER BY StateName;

// --d. WA, Friday (Weekend Category), Multi-Death, Male & Female Victims

MATCH (c:Crash)-[:OCCURRED_IN_SA4]->(s4:SA4)-[:IN_STATE]->(st:State {name: 'WA'})
WHERE c.dayweek = 'Friday'
  AND c.dayOfWeekType = 'Weekend'
  AND c.numberFatalities > 1
WITH c, s4 
WHERE EXISTS { (p_male:Person {gender: 'Male'})-[:WAS_INVOLVED_IN]->(c) }
  AND EXISTS { (p_female:Person {gender: 'Female'})-[:WAS_INVOLVED_IN]->(c) }
RETURN DISTINCT s4.name AS SA4_Name,
              c.nationalRemotenessAreas AS NationalRemotenessArea,
              c.nationalRoadType AS NationalRoadType
ORDER BY SA4_Name;

// --e. Top 5 SA4 Regions by Fatal Crashes during Peak Hours

MATCH (c:Crash)-[:OCCURRED_IN_SA4]->(s4:SA4) 
WHERE c.time IS NOT NULL
WITH c, s4, time(c.time) AS crashTime
WHERE (crashTime >= time('07:00') AND crashTime <= time('09:00'))
   OR (crashTime >= time('16:00') AND crashTime <= time('18:00'))
WITH s4, crashTime 
RETURN s4.name AS SA4_Region,
       count(CASE WHEN crashTime >= time('07:00') AND crashTime <= time('09:00') THEN 1 END) AS MorningPeak,
       count(CASE WHEN crashTime >= time('16:00') AND crashTime <= time('18:00') THEN 1 END) AS AfternoonPeak
ORDER BY (MorningPeak + AfternoonPeak) DESC
LIMIT 5;

// --f. Top 3 Paths of Length 3 between any two LGAs

MATCH path = (lga1:LGA)-[*]-(lga2:LGA)
WHERE elementId(lga1) < elementId(lga2) 
  AND length(path) = 3
RETURN lga1.name AS StartLGA,
       lga2.name AS EndLGA
ORDER BY StartLGA ASC, EndLGA ASC
LIMIT 3;

// --f2 cleaner query version

MATCH path = (lga1:LGA)-[*3]-(lga2:LGA)      
WHERE id(lga1) < id(lga2)                   
  AND lga1 <> lga2
WITH lga1, lga2, path
ORDER BY lga1.name, lga2.name
LIMIT 3
RETURN lga1.name AS StartLGA,
       lga2.name AS EndLGA,
       path;

// --g. Weekday Pedestrian Crashes, Bus/HeavyRigid Involved, Specific Speed Zones

MATCH (p:Person {roadUser: 'Pedestrian'})-[:WAS_INVOLVED_IN]->(c:Crash)
WHERE c.dayOfWeekType = 'Weekday'
  AND (c.busInvolvement = 'yes' OR c.heavyRigidTruckInvolvement = 'yes') 
  AND (c.speedLimit < 40 OR c.speedLimit >= 100)
  AND c.speedLimit IS NOT NULL AND p.ageGroup IS NOT NULL AND c.timeOfDay IS NOT NULL
WITH p, c,
   CASE
     WHEN c.busInvolvement = 'yes' AND c.heavyRigidTruckInvolvement = 'yes' THEN 'Bus and Heavy Rigid'
     WHEN c.busInvolvement = 'yes' THEN 'Bus'
     WHEN c.heavyRigidTruckInvolvement = 'yes' THEN 'Heavy Rigid Truck'
     ELSE 'Other' 
   END AS vehicleType
RETURN c.timeOfDay AS TimeOfDay,
       p.ageGroup AS AgeGroup,
       vehicleType AS VehicleType,
       c.speedLimit AS SpeedLimitation,
       count(DISTINCT c.internalCrashID) AS CrashCount
ORDER BY
  CASE c.timeOfDay WHEN 'Day' THEN 1 WHEN 'Night' THEN 2 ELSE 3 END ASC, 
  p.ageGroup ASC, 
  VehicleType ASC,
  SpeedLimitation ASC;


// -- self-designed query --
// --h1. Compare High-Speed vs. Low/Medium-Speed Zones

MATCH (p:Person {roadUser: 'Driver'})-[:WAS_INVOLVED_IN]->(c:Crash)
WITH p.ageGroup AS DriverAgeGroup, c.speedLimit AS speedLimit
RETURN DriverAgeGroup,
       count(CASE WHEN speedLimit >= 100 THEN 1 END) AS HighSpeedFatalities,
       count(CASE WHEN speedLimit < 100 THEN 1 END) AS LowerSpeedFatalities
ORDER BY DriverAgeGroup;

// --h2. Heavy Vehicle Crashes by Remoteness Area

MATCH (c:Crash)
WHERE (c.busInvolvement = 'yes'
   OR c.heavyRigidTruckInvolvement = 'yes'
   OR c.articulatedTruckInvolvement = 'yes')
  AND c.nationalRemotenessAreas IS NOT NULL
RETURN c.nationalRemotenessAreas AS RemotenessArea,
       count(c) AS HeavyVehicleCrashCount
ORDER BY HeavyVehicleCrashCount DESC;

// --h3. High-Risk Pattern 

MATCH (p:Person {ageGroup: '17_to_25', roadUser: 'Driver'})
       -[:WAS_INVOLVED_IN]->(c:Crash {nationalRoadType: 'National or State Highway'}),
       (c)-[:OCCURRED_IN_SA4]->(:SA4)-[:IN_STATE]->(st:State) 
WHERE c.nationalRemotenessAreas <> 'Major Cities of Australia'
  AND c.nationalRemotenessAreas IS NOT NULL
  AND p.age > 0
WITH st.name AS State,
     c.nationalRemotenessAreas AS RemotenessArea,
     count(DISTINCT c.internalCrashID) AS HighwayCrashCount
WHERE HighwayCrashCount > 10
RETURN State,
       RemotenessArea,
       HighwayCrashCount
ORDER BY State ASC, HighwayCrashCount DESC;

// --h4. Analyzing Secondary Fatalities in Multi-Fatality Crashes

MATCH (p_driver:Person {ageGroup: '17_to_25', roadUser: 'Driver'})
       -[:WAS_INVOLVED_IN]->(c:Crash)
WHERE c.numberFatalities > 1 
WITH c 
MATCH (p_other)-[:WAS_INVOLVED_IN]->(c) // Find anyone involved in that crash 'c'

WHERE p_other.roadUser IS NOT NULL AND p_other.ageGroup IS NOT NULL
     
RETURN p_other.roadUser AS OtherVictimRoadUser,
       p_other.ageGroup AS OtherVictimAgeGroup,
       count(p_other) AS CoFatalityCount // Count the other victims
ORDER BY CoFatalityCount DESC
LIMIT 20; 