// Data Load / Schema Creation
// =======================================================================
// CSV files are copied to Neo4j 'import' directory
// Run each block in Neo4j Browser
// Cypher Queries in cypher_query.txt
// =======================================================================

// --- block 1. Create Constraints ---
CREATE CONSTRAINT unique_person_id IF NOT EXISTS FOR (p:Person) REQUIRE p.personID IS UNIQUE;
CREATE CONSTRAINT unique_crash_id IF NOT EXISTS FOR (c:Crash) REQUIRE c.internalCrashID IS UNIQUE;
CREATE CONSTRAINT unique_lga_name IF NOT EXISTS FOR (l:LGA) REQUIRE l.name IS UNIQUE;
CREATE CONSTRAINT unique_sa4_name IF NOT EXISTS FOR (s4:SA4) REQUIRE s4.name IS UNIQUE;
CREATE CONSTRAINT unique_state_name IF NOT EXISTS FOR (st:State) REQUIRE st.name IS UNIQUE;

// --- block 2. Load Nodes ---

// 2a. Load States
LOAD CSV WITH HEADERS FROM 'file:///states.csv' AS row FIELDTERMINATOR ','
MERGE (st:State {name: row.`name:ID(State)`});

// 2b. Load SA4 Regions
LOAD CSV WITH HEADERS FROM 'file:///sa4s.csv' AS row FIELDTERMINATOR ','
MERGE (s4:SA4 {name: row.`name:ID(SA4)`});

// 2c: Load LGAs 
LOAD CSV WITH HEADERS FROM 'file:///lgas.csv' AS row FIELDTERMINATOR ','
MERGE (l:LGA {name: row.`name:ID(LGA)`});

// 2d: Load Persons 
LOAD CSV WITH HEADERS FROM 'file:///persons.csv' AS row FIELDTERMINATOR ','
MERGE (p:Person {personID: toInteger(row.`personID:ID(Person)`)})
ON CREATE SET p.roadUser = row.roadUser, p.gender = row.gender, p.age = toInteger(row.age), p.ageGroup = row.ageGroup
ON MATCH SET p.roadUser = row.roadUser, p.gender = row.gender, p.age = toInteger(row.age), p.ageGroup = row.ageGroup;

// 2e: Load Crashes 
LOAD CSV WITH HEADERS FROM 'file:///crashes.csv' AS row FIELDTERMINATOR ','
MERGE (c:Crash {internalCrashID: toInteger(row.`internalCrashID:ID(Crash)`)})
ON CREATE SET c.crashID_orig = row.crashID_orig, c.year = toInteger(row.year), c.month = toInteger(row.month), c.dayweek = row.dayweek, c.time = row.time, c.crashType = row.crashType, c.numberFatalities = toInteger(row.numberFatalities), c.busInvolvement = row.busInvolvement, c.heavyRigidTruckInvolvement = row.heavyRigidTruckInvolvement, c.articulatedTruckInvolvement = row.articulatedTruckInvolvement, c.speedLimit = CASE WHEN row.speedLimit IS NULL OR row.speedLimit = '' THEN null ELSE toInteger(row.speedLimit) END, c.nationalRoadType = row.nationalRoadType, c.christmasPeriod = row.christmasPeriod, c.easterPeriod = row.easterPeriod, c.nationalRemotenessAreas = row.nationalRemotenessAreas, c.dayOfWeekType = row.dayOfWeekType, c.timeOfDay = row.timeOfDay
ON MATCH SET c.crashID_orig = row.crashID_orig, c.year = toInteger(row.year), c.month = toInteger(row.month), c.dayweek = row.dayweek, c.time = row.time, c.crashType = row.crashType, c.numberFatalities = toInteger(row.numberFatalities), c.busInvolvement = row.busInvolvement, c.heavyRigidTruckInvolvement = row.heavyRigidTruckInvolvement, c.articulatedTruckInvolvement = row.articulatedTruckInvolvement, c.speedLimit = CASE WHEN row.speedLimit IS NULL OR row.speedLimit = '' THEN null ELSE toInteger(row.speedLimit) END, c.nationalRoadType = row.nationalRoadType, c.christmasPeriod = row.christmasPeriod, c.easterPeriod = row.easterPeriod, c.nationalRemotenessAreas = row.nationalRemotenessAreas, c.dayOfWeekType = row.dayOfWeekType, c.timeOfDay = row.timeOfDay;

// --- 3. Load Relationships ---

// 3a: SA4 -> State (:IN_STATE) 

LOAD CSV WITH HEADERS FROM 'file:///rels_sa4_state.csv' AS row FIELDTERMINATOR ','
MATCH (s4:SA4 {name: row.`:START_ID(SA4)`})
MATCH (st:State {name: row.`:END_ID(State)`})
MERGE (s4)-[r:IN_STATE]->(st);

// 3b: Crash -> LGA 

LOAD CSV WITH HEADERS FROM 'file:///rels_crash_lga.csv' AS row FIELDTERMINATOR ','
MATCH (c:Crash {internalCrashID: toInteger(row.`:START_ID(Crash)`)})
MATCH (l:LGA {name: row.`:END_ID(LGA)`})
MERGE (c)-[r:OCCURRED_IN_LGA]->(l);

// 3c: Crash -> SA4

LOAD CSV WITH HEADERS FROM 'file:///rels_crash_sa4.csv' AS row FIELDTERMINATOR ',' // New CSV file
MATCH (c:Crash {internalCrashID: toInteger(row.`:START_ID(Crash)`)})
MATCH (s4:SA4 {name: row.`:END_ID(SA4)`})
MERGE (c)-[r:OCCURRED_IN_SA4]->(s4);

// 3d: Person -> Crash 

LOAD CSV WITH HEADERS FROM 'file:///rels_person_crash.csv' AS row FIELDTERMINATOR ','
MATCH (p:Person {personID: toInteger(row.`:START_ID(Person)`)})
MATCH (c:Crash {internalCrashID: toInteger(row.`:END_ID(Crash)`)})
MERGE (p)-[r:WAS_INVOLVED_IN]->(c);


// --- 4. Create Indexes (for better performance) ---
CREATE INDEX idx_crash_year IF NOT EXISTS FOR (c:Crash) ON (c.year);
CREATE INDEX idx_crash_trucks IF NOT EXISTS FOR (c:Crash) ON (c.articulatedTruckInvolvement, c.busInvolvement, c.heavyRigidTruckInvolvement);
CREATE INDEX idx_crash_timeofday IF NOT EXISTS FOR (c:Crash) ON (c.timeOfDay);
CREATE INDEX idx_crash_dayweektype IF NOT EXISTS FOR (c:Crash) ON (c.dayOfWeekType);
CREATE INDEX idx_crash_holiday IF NOT EXISTS FOR (c:Crash) ON (c.christmasPeriod, c.easterPeriod);
CREATE INDEX idx_crash_remoteness IF NOT EXISTS FOR (c:Crash) ON (c.nationalRemotenessAreas);
CREATE INDEX idx_crash_speed IF NOT EXISTS FOR (c:Crash) ON (c.speedLimit);
CREATE INDEX idx_crash_time IF NOT EXISTS FOR (c:Crash) ON (c.time);
CREATE INDEX idx_person_agegroup IF NOT EXISTS FOR (p:Person) ON (p.ageGroup);
CREATE INDEX idx_person_roaduser IF NOT EXISTS FOR (p:Person) ON (p.roadUser);
CREATE INDEX idx_person_gender IF NOT EXISTS FOR (p:Person) ON (p.gender);


